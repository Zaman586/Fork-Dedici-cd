name: Java CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
          cache: maven
      
      - name: Build with Maven Wrapper
        run: ./mvnw -B package

      - name: List target directory
        run: ls -al target/
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: target/spring-petclinic-3.3.0-SNAPSHOT.jar.original

  test:
    runs-on: ubuntu-latest
    needs: build  # Ensures tests run after the build stage
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven Wrapper
        run: ./mvnw -B package

      - name: Run Tests
        run: ./mvnw test

deploy:
  runs-on: ubuntu-latest
  needs: build  # Ensures deployment only occurs after the build stage
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: maven

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    - name: List files in target directory
      run: |
        ls -la target

    - name: Deploy to Server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        # Create id_rsa file with SSH key
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' > id_rsa
        chmod 600 id_rsa
        
        # Test the SSH key by trying to connect (optional)
        ssh -i id_rsa -o StrictHostKeyChecking=no root@103.151.111.182 'echo SSH key works'

        # Deploy the JAR file (update path if necessary)
        scp -i id_rsa -o StrictHostKeyChecking=no target/spring-petclinic-3.3.0-SNAPSHOT.jar.original root@103.151.111.182:/var/www/html/
        
        # Run the deployment script on the server
        ssh -i id_rsa -o StrictHostKeyChecking=no root@103.151.111.182 << 'EOF'
          # Kill any running instance of the application (if necessary)
          pkill -f 'java -jar /var/www/html/spring-petclinic-3.3.0-SNAPSHOT.jar.original' || true
          
          # Start the application on port 8080
          nohup java -jar /var/www/html/spring-petclinic-3.3.0-SNAPSHOT.jar.original --server.port=8080 > /dev/null 2>&1 &
          
          echo "Application deployed and running on port 8080"
        EOF
